// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace AzInfoApi
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Models;

    /// <summary>
    /// Extension methods for AzInfoApiClient.
    /// </summary>
    public static partial class AzInfoApiClientExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datacenter'>
            /// </param>
            /// <param name='apiVersion'>
            /// </param>
            /// <param name='provider'>
            /// </param>
            /// <param name='resourceType'>
            /// </param>
            public static IList<ApiInfo> ApiOperationsGet(this IAzInfoApiClient operations, string datacenter = default(string), string apiVersion = default(string), string provider = default(string), string resourceType = default(string))
            {
                return Task.Factory.StartNew(s => ((IAzInfoApiClient)s).ApiOperationsGetAsync(datacenter, apiVersion, provider, resourceType), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datacenter'>
            /// </param>
            /// <param name='apiVersion'>
            /// </param>
            /// <param name='provider'>
            /// </param>
            /// <param name='resourceType'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<ApiInfo>> ApiOperationsGetAsync(this IAzInfoApiClient operations, string datacenter = default(string), string apiVersion = default(string), string provider = default(string), string resourceType = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiOperationsGetWithHttpMessagesAsync(datacenter, apiVersion, provider, resourceType, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datacenter'>
            /// </param>
            /// <param name='apiVersion'>
            /// </param>
            /// <param name='provider'>
            /// </param>
            /// <param name='resourceType'>
            /// </param>
            public static IList<ApiInfo> ApiFilterableoperationsGet(this IAzInfoApiClient operations, string datacenter = default(string), string apiVersion = default(string), string provider = default(string), string resourceType = default(string))
            {
                return Task.Factory.StartNew(s => ((IAzInfoApiClient)s).ApiFilterableoperationsGetAsync(datacenter, apiVersion, provider, resourceType), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datacenter'>
            /// </param>
            /// <param name='apiVersion'>
            /// </param>
            /// <param name='provider'>
            /// </param>
            /// <param name='resourceType'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<ApiInfo>> ApiFilterableoperationsGetAsync(this IAzInfoApiClient operations, string datacenter = default(string), string apiVersion = default(string), string provider = default(string), string resourceType = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiFilterableoperationsGetWithHttpMessagesAsync(datacenter, apiVersion, provider, resourceType, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiVersion'>
            /// </param>
            /// <param name='dataCenter'>
            /// </param>
            /// <param name='provider'>
            /// </param>
            /// <param name='resourceType'>
            /// </param>
            public static IList<ApiInfo> ApiVersionsGet(this IAzInfoApiClient operations, string apiVersion = default(string), string dataCenter = default(string), string provider = default(string), string resourceType = default(string))
            {
                return Task.Factory.StartNew(s => ((IAzInfoApiClient)s).ApiVersionsGetAsync(apiVersion, dataCenter, provider, resourceType), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiVersion'>
            /// </param>
            /// <param name='dataCenter'>
            /// </param>
            /// <param name='provider'>
            /// </param>
            /// <param name='resourceType'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<ApiInfo>> ApiVersionsGetAsync(this IAzInfoApiClient operations, string apiVersion = default(string), string dataCenter = default(string), string provider = default(string), string resourceType = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiVersionsGetWithHttpMessagesAsync(apiVersion, dataCenter, provider, resourceType, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiVersion'>
            /// </param>
            /// <param name='provider'>
            /// </param>
            /// <param name='resourceType'>
            /// </param>
            public static IList<ApiInfo> ApiDatacentersGet(this IAzInfoApiClient operations, string apiVersion = default(string), string provider = default(string), string resourceType = default(string))
            {
                return Task.Factory.StartNew(s => ((IAzInfoApiClient)s).ApiDatacentersGetAsync(apiVersion, provider, resourceType), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiVersion'>
            /// </param>
            /// <param name='provider'>
            /// </param>
            /// <param name='resourceType'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<ApiInfo>> ApiDatacentersGetAsync(this IAzInfoApiClient operations, string apiVersion = default(string), string provider = default(string), string resourceType = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiDatacentersGetWithHttpMessagesAsync(apiVersion, provider, resourceType, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datacenter'>
            /// </param>
            /// <param name='apiVersion'>
            /// </param>
            public static IList<ApiInfo> ApiProvidersGet(this IAzInfoApiClient operations, string datacenter = default(string), string apiVersion = default(string))
            {
                return Task.Factory.StartNew(s => ((IAzInfoApiClient)s).ApiProvidersGetAsync(datacenter, apiVersion), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datacenter'>
            /// </param>
            /// <param name='apiVersion'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<ApiInfo>> ApiProvidersGetAsync(this IAzInfoApiClient operations, string datacenter = default(string), string apiVersion = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiProvidersGetWithHttpMessagesAsync(datacenter, apiVersion, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datacenter'>
            /// </param>
            /// <param name='provider'>
            /// </param>
            /// <param name='apiVersion'>
            /// </param>
            public static IList<ApiInfo> ApiResourcestypesGet(this IAzInfoApiClient operations, string datacenter = default(string), string provider = default(string), string apiVersion = default(string))
            {
                return Task.Factory.StartNew(s => ((IAzInfoApiClient)s).ApiResourcestypesGetAsync(datacenter, provider, apiVersion), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datacenter'>
            /// </param>
            /// <param name='provider'>
            /// </param>
            /// <param name='apiVersion'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<ApiInfo>> ApiResourcestypesGetAsync(this IAzInfoApiClient operations, string datacenter = default(string), string provider = default(string), string apiVersion = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiResourcestypesGetWithHttpMessagesAsync(datacenter, provider, apiVersion, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='key'>
            /// </param>
            public static string ApiUpdateGet(this IAzInfoApiClient operations, string key = default(string))
            {
                return Task.Factory.StartNew(s => ((IAzInfoApiClient)s).ApiUpdateGetAsync(key), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='key'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> ApiUpdateGetAsync(this IAzInfoApiClient operations, string key = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiUpdateGetWithHttpMessagesAsync(key, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
